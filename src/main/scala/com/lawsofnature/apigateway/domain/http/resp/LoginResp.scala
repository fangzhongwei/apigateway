// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.lawsofnature.apigateway.domain.http.resp

@SerialVersionUID(0L)
final case class LoginResp(
    code: String = "",
    msg: String = "",
    token: String = "",
    key: String = "",
    mobile: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[LoginResp] with com.trueaccord.lenses.Updatable[LoginResp] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (code != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, code) }
      if (msg != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, msg) }
      if (token != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, token) }
      if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, key) }
      if (mobile != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, mobile) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = code
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = msg
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = token
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = key
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = mobile
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.lawsofnature.apigateway.domain.http.resp.LoginResp = {
      var __code = this.code
      var __msg = this.msg
      var __token = this.token
      var __key = this.key
      var __mobile = this.mobile
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __code = _input__.readString()
          case 18 =>
            __msg = _input__.readString()
          case 26 =>
            __token = _input__.readString()
          case 34 =>
            __key = _input__.readString()
          case 42 =>
            __mobile = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.lawsofnature.apigateway.domain.http.resp.LoginResp(
          code = __code,
          msg = __msg,
          token = __token,
          key = __key,
          mobile = __mobile
      )
    }
    def withCode(__v: String): LoginResp = copy(code = __v)
    def withMsg(__v: String): LoginResp = copy(msg = __v)
    def withToken(__v: String): LoginResp = copy(token = __v)
    def withKey(__v: String): LoginResp = copy(key = __v)
    def withMobile(__v: String): LoginResp = copy(mobile = __v)
    def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = code
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = msg
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = token
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = key
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = mobile
          if (__t != "") __t else null
        }
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.lawsofnature.apigateway.domain.http.resp.LoginResp
}

object LoginResp extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.lawsofnature.apigateway.domain.http.resp.LoginResp] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.lawsofnature.apigateway.domain.http.resp.LoginResp] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.lawsofnature.apigateway.domain.http.resp.LoginResp = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.lawsofnature.apigateway.domain.http.resp.LoginResp(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String]
    )
  }
  def descriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RespProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.lawsofnature.apigateway.domain.http.resp.LoginResp(
  )
  implicit class LoginRespLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.lawsofnature.apigateway.domain.http.resp.LoginResp]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.lawsofnature.apigateway.domain.http.resp.LoginResp](_l) {
    def code: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def msg: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.msg)((c_, f_) => c_.copy(msg = f_))
    def token: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.token)((c_, f_) => c_.copy(token = f_))
    def key: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def mobile: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.mobile)((c_, f_) => c_.copy(mobile = f_))
  }
  final val CODE_FIELD_NUMBER = 1
  final val MSG_FIELD_NUMBER = 2
  final val TOKEN_FIELD_NUMBER = 3
  final val KEY_FIELD_NUMBER = 4
  final val MOBILE_FIELD_NUMBER = 5
}
