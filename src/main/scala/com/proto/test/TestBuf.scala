// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.proto.test

@SerialVersionUID(0L)
final case class TestBuf(
    iD: Int = 0,
    url: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TestBuf] with com.trueaccord.lenses.Updatable[TestBuf] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (iD != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, iD) }
      if (url != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, url) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = iD
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = url
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.proto.test.TestBuf = {
      var __iD = this.iD
      var __url = this.url
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __iD = _input__.readInt32()
          case 18 =>
            __url = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.proto.test.TestBuf(
          iD = __iD,
          url = __url
      )
    }
    def withID(__v: Int): TestBuf = copy(iD = __v)
    def withUrl(__v: String): TestBuf = copy(url = __v)
    def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = iD
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = url
          if (__t != "") __t else null
        }
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.proto.test.TestBuf
}

object TestBuf extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.proto.test.TestBuf] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.proto.test.TestBuf] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.proto.test.TestBuf = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.proto.test.TestBuf(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
    )
  }
  def descriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.proto.test.TestBuf(
  )
  implicit class TestBufLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.proto.test.TestBuf]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.proto.test.TestBuf](_l) {
    def iD: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.iD)((c_, f_) => c_.copy(iD = f_))
    def url: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.url)((c_, f_) => c_.copy(url = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val URL_FIELD_NUMBER = 2
}
