// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.jxjxgo.apigateway.domain.http.resp.checkgamestatus

@SerialVersionUID(0L)
final case class GameTurnResp(
    gameId: Long = 0L,
    gameType: Int = 0,
    deviceType: Int = 0,
    cards: String = "",
    landlordCards: String = "",
    baseAmount: Int = 0,
    multiples: Int = 0,
    previousNickname: String = "",
    previousCardsCount: Int = 0,
    nextNickname: String = "",
    nextCardsCount: Int = 0,
    choosingLandlord: Boolean = false,
    landlord: Boolean = false,
    turnToPlay: Boolean = false,
    ext1: String = "",
    ext2: String = "",
    ext3: String = "",
    ext4: String = "",
    ext5: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[GameTurnResp] with com.trueaccord.lenses.Updatable[GameTurnResp] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (gameId != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, gameId) }
      if (gameType != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, gameType) }
      if (deviceType != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, deviceType) }
      if (cards != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, cards) }
      if (landlordCards != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, landlordCards) }
      if (baseAmount != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, baseAmount) }
      if (multiples != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, multiples) }
      if (previousNickname != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, previousNickname) }
      if (previousCardsCount != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, previousCardsCount) }
      if (nextNickname != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, nextNickname) }
      if (nextCardsCount != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, nextCardsCount) }
      if (choosingLandlord != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(12, choosingLandlord) }
      if (landlord != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, landlord) }
      if (turnToPlay != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(14, turnToPlay) }
      if (ext1 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(15, ext1) }
      if (ext2 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(16, ext2) }
      if (ext3 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(17, ext3) }
      if (ext4 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(18, ext4) }
      if (ext5 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, ext5) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = gameId
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = gameType
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = deviceType
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = cards
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = landlordCards
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = baseAmount
        if (__v != 0) {
          _output__.writeInt32(6, __v)
        }
      };
      {
        val __v = multiples
        if (__v != 0) {
          _output__.writeInt32(7, __v)
        }
      };
      {
        val __v = previousNickname
        if (__v != "") {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = previousCardsCount
        if (__v != 0) {
          _output__.writeInt32(9, __v)
        }
      };
      {
        val __v = nextNickname
        if (__v != "") {
          _output__.writeString(10, __v)
        }
      };
      {
        val __v = nextCardsCount
        if (__v != 0) {
          _output__.writeInt32(11, __v)
        }
      };
      {
        val __v = choosingLandlord
        if (__v != false) {
          _output__.writeBool(12, __v)
        }
      };
      {
        val __v = landlord
        if (__v != false) {
          _output__.writeBool(13, __v)
        }
      };
      {
        val __v = turnToPlay
        if (__v != false) {
          _output__.writeBool(14, __v)
        }
      };
      {
        val __v = ext1
        if (__v != "") {
          _output__.writeString(15, __v)
        }
      };
      {
        val __v = ext2
        if (__v != "") {
          _output__.writeString(16, __v)
        }
      };
      {
        val __v = ext3
        if (__v != "") {
          _output__.writeString(17, __v)
        }
      };
      {
        val __v = ext4
        if (__v != "") {
          _output__.writeString(18, __v)
        }
      };
      {
        val __v = ext5
        if (__v != "") {
          _output__.writeString(19, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp = {
      var __gameId = this.gameId
      var __gameType = this.gameType
      var __deviceType = this.deviceType
      var __cards = this.cards
      var __landlordCards = this.landlordCards
      var __baseAmount = this.baseAmount
      var __multiples = this.multiples
      var __previousNickname = this.previousNickname
      var __previousCardsCount = this.previousCardsCount
      var __nextNickname = this.nextNickname
      var __nextCardsCount = this.nextCardsCount
      var __choosingLandlord = this.choosingLandlord
      var __landlord = this.landlord
      var __turnToPlay = this.turnToPlay
      var __ext1 = this.ext1
      var __ext2 = this.ext2
      var __ext3 = this.ext3
      var __ext4 = this.ext4
      var __ext5 = this.ext5
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __gameId = _input__.readInt64()
          case 16 =>
            __gameType = _input__.readInt32()
          case 24 =>
            __deviceType = _input__.readInt32()
          case 34 =>
            __cards = _input__.readString()
          case 42 =>
            __landlordCards = _input__.readString()
          case 48 =>
            __baseAmount = _input__.readInt32()
          case 56 =>
            __multiples = _input__.readInt32()
          case 66 =>
            __previousNickname = _input__.readString()
          case 72 =>
            __previousCardsCount = _input__.readInt32()
          case 82 =>
            __nextNickname = _input__.readString()
          case 88 =>
            __nextCardsCount = _input__.readInt32()
          case 96 =>
            __choosingLandlord = _input__.readBool()
          case 104 =>
            __landlord = _input__.readBool()
          case 112 =>
            __turnToPlay = _input__.readBool()
          case 122 =>
            __ext1 = _input__.readString()
          case 130 =>
            __ext2 = _input__.readString()
          case 138 =>
            __ext3 = _input__.readString()
          case 146 =>
            __ext4 = _input__.readString()
          case 154 =>
            __ext5 = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp(
          gameId = __gameId,
          gameType = __gameType,
          deviceType = __deviceType,
          cards = __cards,
          landlordCards = __landlordCards,
          baseAmount = __baseAmount,
          multiples = __multiples,
          previousNickname = __previousNickname,
          previousCardsCount = __previousCardsCount,
          nextNickname = __nextNickname,
          nextCardsCount = __nextCardsCount,
          choosingLandlord = __choosingLandlord,
          landlord = __landlord,
          turnToPlay = __turnToPlay,
          ext1 = __ext1,
          ext2 = __ext2,
          ext3 = __ext3,
          ext4 = __ext4,
          ext5 = __ext5
      )
    }
    def withGameId(__v: Long): GameTurnResp = copy(gameId = __v)
    def withGameType(__v: Int): GameTurnResp = copy(gameType = __v)
    def withDeviceType(__v: Int): GameTurnResp = copy(deviceType = __v)
    def withCards(__v: String): GameTurnResp = copy(cards = __v)
    def withLandlordCards(__v: String): GameTurnResp = copy(landlordCards = __v)
    def withBaseAmount(__v: Int): GameTurnResp = copy(baseAmount = __v)
    def withMultiples(__v: Int): GameTurnResp = copy(multiples = __v)
    def withPreviousNickname(__v: String): GameTurnResp = copy(previousNickname = __v)
    def withPreviousCardsCount(__v: Int): GameTurnResp = copy(previousCardsCount = __v)
    def withNextNickname(__v: String): GameTurnResp = copy(nextNickname = __v)
    def withNextCardsCount(__v: Int): GameTurnResp = copy(nextCardsCount = __v)
    def withChoosingLandlord(__v: Boolean): GameTurnResp = copy(choosingLandlord = __v)
    def withLandlord(__v: Boolean): GameTurnResp = copy(landlord = __v)
    def withTurnToPlay(__v: Boolean): GameTurnResp = copy(turnToPlay = __v)
    def withExt1(__v: String): GameTurnResp = copy(ext1 = __v)
    def withExt2(__v: String): GameTurnResp = copy(ext2 = __v)
    def withExt3(__v: String): GameTurnResp = copy(ext3 = __v)
    def withExt4(__v: String): GameTurnResp = copy(ext4 = __v)
    def withExt5(__v: String): GameTurnResp = copy(ext5 = __v)
    def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => {
          val __t = gameId
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = gameType
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = deviceType
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = cards
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = landlordCards
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = baseAmount
          if (__t != 0) __t else null
        }
        case 7 => {
          val __t = multiples
          if (__t != 0) __t else null
        }
        case 8 => {
          val __t = previousNickname
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = previousCardsCount
          if (__t != 0) __t else null
        }
        case 10 => {
          val __t = nextNickname
          if (__t != "") __t else null
        }
        case 11 => {
          val __t = nextCardsCount
          if (__t != 0) __t else null
        }
        case 12 => {
          val __t = choosingLandlord
          if (__t != false) __t else null
        }
        case 13 => {
          val __t = landlord
          if (__t != false) __t else null
        }
        case 14 => {
          val __t = turnToPlay
          if (__t != false) __t else null
        }
        case 15 => {
          val __t = ext1
          if (__t != "") __t else null
        }
        case 16 => {
          val __t = ext2
          if (__t != "") __t else null
        }
        case 17 => {
          val __t = ext3
          if (__t != "") __t else null
        }
        case 18 => {
          val __t = ext4
          if (__t != "") __t else null
        }
        case 19 => {
          val __t = ext5
          if (__t != "") __t else null
        }
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp
}

object GameTurnResp extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(6), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(8), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(9), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(10), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(11), false).asInstanceOf[Boolean],
      __fieldsMap.getOrElse(__fields.get(12), false).asInstanceOf[Boolean],
      __fieldsMap.getOrElse(__fields.get(13), false).asInstanceOf[Boolean],
      __fieldsMap.getOrElse(__fields.get(14), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(15), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(16), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(17), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(18), "").asInstanceOf[String]
    )
  }
  def descriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CheckgamestatusProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp(
  )
  implicit class GameTurnRespLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.jxjxgo.apigateway.domain.http.resp.checkgamestatus.GameTurnResp](_l) {
    def gameId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.gameId)((c_, f_) => c_.copy(gameId = f_))
    def gameType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.gameType)((c_, f_) => c_.copy(gameType = f_))
    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def cards: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.cards)((c_, f_) => c_.copy(cards = f_))
    def landlordCards: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.landlordCards)((c_, f_) => c_.copy(landlordCards = f_))
    def baseAmount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.baseAmount)((c_, f_) => c_.copy(baseAmount = f_))
    def multiples: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.multiples)((c_, f_) => c_.copy(multiples = f_))
    def previousNickname: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.previousNickname)((c_, f_) => c_.copy(previousNickname = f_))
    def previousCardsCount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.previousCardsCount)((c_, f_) => c_.copy(previousCardsCount = f_))
    def nextNickname: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.nextNickname)((c_, f_) => c_.copy(nextNickname = f_))
    def nextCardsCount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.nextCardsCount)((c_, f_) => c_.copy(nextCardsCount = f_))
    def choosingLandlord: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.choosingLandlord)((c_, f_) => c_.copy(choosingLandlord = f_))
    def landlord: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.landlord)((c_, f_) => c_.copy(landlord = f_))
    def turnToPlay: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.turnToPlay)((c_, f_) => c_.copy(turnToPlay = f_))
    def ext1: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.ext1)((c_, f_) => c_.copy(ext1 = f_))
    def ext2: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.ext2)((c_, f_) => c_.copy(ext2 = f_))
    def ext3: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.ext3)((c_, f_) => c_.copy(ext3 = f_))
    def ext4: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.ext4)((c_, f_) => c_.copy(ext4 = f_))
    def ext5: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.ext5)((c_, f_) => c_.copy(ext5 = f_))
  }
  final val GAMEID_FIELD_NUMBER = 1
  final val GAMETYPE_FIELD_NUMBER = 2
  final val DEVICETYPE_FIELD_NUMBER = 3
  final val CARDS_FIELD_NUMBER = 4
  final val LANDLORDCARDS_FIELD_NUMBER = 5
  final val BASEAMOUNT_FIELD_NUMBER = 6
  final val MULTIPLES_FIELD_NUMBER = 7
  final val PREVIOUSNICKNAME_FIELD_NUMBER = 8
  final val PREVIOUSCARDSCOUNT_FIELD_NUMBER = 9
  final val NEXTNICKNAME_FIELD_NUMBER = 10
  final val NEXTCARDSCOUNT_FIELD_NUMBER = 11
  final val CHOOSINGLANDLORD_FIELD_NUMBER = 12
  final val LANDLORD_FIELD_NUMBER = 13
  final val TURNTOPLAY_FIELD_NUMBER = 14
  final val EXT1_FIELD_NUMBER = 15
  final val EXT2_FIELD_NUMBER = 16
  final val EXT3_FIELD_NUMBER = 17
  final val EXT4_FIELD_NUMBER = 18
  final val EXT5_FIELD_NUMBER = 19
}
